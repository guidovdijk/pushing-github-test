/*
 * @mixin pseudo-gradient()
 * 
 * @param { $map } Map with values.
 * @param { $deg } Direction the gradient is going.
 * 
 * Description:
 *  The pseudo-gradient mixin will use SOME of the $gradient variable map in the abstract/_variable.scss file to make the gradients
 *  The $map is required, the others have a default value.
 *  A fallback background-color will be made from the first color in the colors map variable
 *  Or by the fallback propertie in the list.
 * 
 *  If the type of the gradient is 'radial' the '$deg' variable will be null and gets replaced by the '$radical-extent-keyword' variable.
 *  If the type is 'linear' the '$radical-extent-keyword' variable will be null and the '$deg' will be used.
 *
 * Usage:
 *  @include pseudo-gradient($gradient-map) // Without $deg so it will use the $deg from the $gradient-map variable
 *  @include pseudo-gradient(map-get($gradients, chill)); // With a list from the parent map $gradients.
 *  @include pseudo-gradient($gradient-map, 200deg) // With $deg so it will override the $deg variable from the map (usefull for animations).
 *  ($deg can't be false, bacause to have a valid LINEAR gradient $deg must be used.).
*/

@mixin pseudo-gradient($map, $deg: null){
    $type:                    linear !default;
    $radical-extent-keyword: 'circle at center' !default;
    $colors:                  map-get($map, colors);
    $fallback:                unquote('#{nth($colors, 1)}') !default; 
    $fallback:                str-replace($fallback, ' 0%', '');
    
    $gradient-type:           return-map-value($map, type, $type);

    $fallback:                unquote('#{nth($colors, 1)}') !default; 
    $fallback:                str-replace($fallback, ' 0%', '');
    $fallback:                return-map-value($map, fallback, $fallback);

    @if $deg == null {
        $deg: return-map-value($map, deg, 180deg);
    }

    @if #{$gradient-type} == radial {
        $deg: null;
        $radical-extent-keyword: return-map-value($map, radical-extent-keyword, 'circle at center');
        $radical-extent-keyword: unquote($radical-extent-keyword);
    } @else {
        $radical-extent-keyword: null;
    }

    &:before {
        @include pseudo;
        width: 100%;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        background: $fallback;
        background: #{$gradient-type} + '-gradient(' + ($deg, $radical-extent-keyword, $colors) + ')';
    }
}